:root /* Селектор для выбора корневого элемента в HTML и SVG. Часто используют для кастомных свойств. 
Псевдокласс :root используется для того, чтобы задавать кастомные свойства - переменные которые используются  нескольких местах */
{
    --gutter: 15px; /* создали переменную, содержащую количество пикселей. С названием gutter=отступ чтобы использовать её несколько раз в множестве классов col-3,6,12..., и которую можно изменить в одном месте и в результате она численно изменится во всех местах кода где используется */

    --bg: teal; /* создали переменную, содержащую цвет */
}

*, *:before, *:after {
    box-sizing: inherit; /* наследуемое */
}
/* Таким образом у нас все элементы, и псевдоэлементы before и after, будут наследовать box-sizing у html. В итоге будет ещё более гибкая структура с box-sizing */

html {
    box-sizing: border-box;
    font-size: 12pt;
}

body,p,h1,h2,h3,ul,ol {
    margin: 0;
    padding: 0;
} /* Здесь мы сбросили все внешние и внутренние отступы у простого текста без тэга, и у тегов текста потому, что по умолчнанию они есть */

.header {
    background-color: var(--bg); /* задний фон у общего div'а который имеет ширину полностью всего окна браузера и высоту ограниченную элементами которые в нем находятся */
}

.conteiner /* это - внутреннее белое поле, в котром уже будут находиться наши блоки */
{
    background-color: #eee; /* цвет белый, так как оно вложенно в header, то это фон накладывается поверх установленного header'ом как бы закрашивая его собой поверх */
    max-width: 1200px; /* это мы ограничили максимальную ширину, оно может сжиматься и разжиматься, но максимальное значение 1200px. Если эту запись убрать, то оно собой полностью закрашивает зелёный header и как бы полностью становится вместо него. 
    Если написать "width: 1200px;" а не max-width, то почему-то ничего не зменяется, разве что при сужении-расширении окна блоки сжимаются-разжимаются с микролагами  */
    
    margin: 0 auto; 
    /* Когда указываем такую запись это означает что мы центрируем блок по центру. Если эту запись убрать, то блок прилипнет к левой строное веб-страницы */
    /* 0 - сверху и снизу, auto слева и справа по бокам от краёв экрана одинаково равномерное чтобы содержимое было в центре (auto указывает, что размер отступов будет автоматически рассчитан браузером). 
    Как только больше 1200 пикс, то появляется цвет teal от блока header, как только меньше то он собой полностью перекрывает header */

    padding: 0 15px; /* p:0-15. Это как бы следующий вложенный блок row будет не доходить до краев белого блока слева и справа на 15px. Это мы будущие блоки которые будут находиться внутри отодвинули по горизонтали от границ белого прямоугольника внутрь по 15 пикс слева и справа каждый  */
}

.row /* Этот блок вообще не видно как бы, он нужен чтобы присвоить вложенным в него кучке блоков свойства flex */
{
    display: flex; /* Расположили вложенные блоки в ряд вместо "друг под другом" */

    flex-wrap: wrap; /* элементы будут переходить на новые строки если будут не влезать */
}

.row > div { /* Последовательность селекторов отражает непосредственную вложенность - селектор справа от оператора должен быть прямым потомком селектора из левой части. Эта запись означает, что для всех дочерних div'ов независимо от того какой они класс имеют и сколько их, будут применятья стили к ним. Если  вместо ">" написать "пробел" как было раньше, то то же работает потому что когда пробел там любая вложенность, а не непосредсвенная вложенность */

padding: 15px; /* внутренноее цветное поле 15px во все 4 стороны от букв для каждого блока, если это убрать то огибающий прямоугольник будет ровно вокруг букв */

margin: 0 auto; /* m0-au - это чтобы выровнять всё по центру. 
Блоки будут рисоваться равномерно от центра, а не от левого края.
Если это не написать, то всё прилипнет друг к другу и к левому краю и все отступы будут добавляться в конце */

background-color: wheat;

border: 1px solid gray;
}

/* ---
Выше мы подготовили площадку для блоков. Ниже пишем классы для блоков разных размеров начиная с меньшего 
--- */

.col-3 /* класс, описывающий размер блока, соответствующий трём колонкам */
{
    width: calc(25% - 15px); 
    /* Этим выражением мы увеличиваем нашу ширину  */
    /* 15px это отсупы */
    /* calc() - это функция матиматического рассчета, причем если умножаем или делим, то можно писать слитно, а если вычитаем или суммируем, то знаки плюс и минус должны отбиваться пробелами с двух сторон */
    /* 25% мы рассчитали так: 12 виртуальные колонки это 100% как бы от дозволенной ширины от рамок в которые загнан текущий блок внешними блоками, а именно 
     3 колонки это 3/12=0,25=25%*. Указано именно в процентах специально иначе в числовом виде чокнешься это всё считать. */
}

.col-4 {
    width: calc((100%*4/12) - var(--gutter));
    /* 33.33% это мы взяли 4 колонки из 12. 4/12=0,33333 
    Здесь мы вместо числа записали переменную var() и в качестве самой переменной --gutter написанной в самом верху в псевдоклассе :root */
}

.col-6 {
    width: calc(50% - var(--gutter));
}

.col-12 {
    width: calc(100% - var(--gutter)); 
    /* За 100% считается если окно на мониторе на полную, то это размер который позволяет класс conteiner ещё и минуса паддинг. 1200px-padding(15x2)=1200-30=1170px.
    Если забыть поставить пробел до или после минуса, то калькулятор не считает */
}

/* ---
Ниже пишем медиазапросы, которые долны быть написаны после стилей, то есть их надо писать в конце всегда ---
*/

/* Правило @media позволяет указать тип носителя, для которого будет применяться указанный стиль. В качестве типов выступают различные устройства, например, screen - это "Экран монитора", принтер и прочее */

@media screen and (max-width:992px) /* Это означает, что то что здесь будет написано будет работать только на экранах имеющих размер меньше 992px. Это число взято с документации бутстрапа для уровня сетки "Большой - Large (lg)"
 https://getbootstrap.su/docs/5.3/layout/grid/ */
 /* Если коротко, то это называется перестроить сетку */
{
    .conteiner {
        max-width: 100%; /* Делаем так чтобы для белого поля перестало работать ограничение в 1200пикс/ Под вопросом, если эту запись исключить то никаких изменений нет, всё и так работает потому что ширина и так меньше 1200 пикс*/
    }
    .col-Lg-3 {
            width: calc(25% - 15px); 
    }

    .col-Lg-4 {
        width: calc(33.33% - var(--gutter));
    }      

    .col-Lg-6 {
        width: calc(50% - var(--gutter));
    }
    /* Смотреть html код. Как только разрешение станет меньше 992, то к некоторым блоками занимающих 3 и 4 колонки применится свойство .col-Lg-6 - это чтобы они стали занимать 6 колонок */

    .col-Lg-12 {
        width: calc(100% - var(--gutter));     
    }
    
    /* В итоге как только разрешение экрана станет от 0 до 992 пикселей, то эти стили начинают работать и они собой перекрывают предыдущий стиль потому что видимо написаны ниже в css и вдобавок видимо учывается их порядок слева направо. Когда разрешение больше, то эти стили как бы отключены, но никакой ошибки нет */

    body {
        background-color: blue;
    } /* Это специально написано чтобы увидеть в F12 когда сработает @media. А то как будто ничего не меняется получилось. И он срабатывать начинает как только ширина становится меньше либо равно 992px.
    Если разрешение больше 992 пикс, то фон становится белым потому что он такой по умолчанию и мы его не переопределяли. */
}

@media screen and (max-width:768px) /* Для экранов меньше 768px. Уровень сетки "Средний - Medium (md)" */
{
    /* Для класса .conteiner (белый блок) можно уже не устанавливать максимальную ширину потому что она применится сверху - с кода про 992px */

    body {
        background-color: red;
    } 

    .col-md-3 {
        width: calc(25% - 15px); 
    }
    .col-md-4 {
        width: calc(33.33% - var(--gutter));
    } 
    .col-md-6 {
        width: calc(50% - var(--gutter));
    }
    
    .col-md-12 {
        width: calc(100% - var(--gutter));     
    }
}

@media screen and (max-width:576px) /* Для экранов меньше 576px. Уровень сетки "Маленький - Small (sm)" */
{
    body {
        background-color: green;
    } 
    .col-sm-3 {
        width: calc(25% - 15px); 
    }
    .col-sm-4 {
        width: calc(33.33% - var(--gutter));
    } 
    .col-sm-6 {
        width: calc(50% - var(--gutter));
    }
    
    .col-sm-12 {
        width: calc(100% - var(--gutter));     
    }
}

