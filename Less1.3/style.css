:root /* Селектор для выбора корневого элемента в HTML и SVG. Часто используют для кастомных свойств. 
Псевдокласс :root используется для того, чтобы задавать кастомные свойства - переменные которые используются  нескольких местах */
{
    --gutter: 15px; /* создали переменную gutter=отступ чтобы исползоать её несколько раз в классе col-3,6,12, и которую разом можно изменять численно в нескольких местах, а не менять руками в большом коде */

    --bg: teal; /* создали переменную содержащую цвет */
}

*, *:before, *:after {
    box-sizing: inherit;
    /* наследуемое */
}
/* Таким образом у нас все элементы и пседоэлементы before и after будут наследовать box-sizing у html. В итоге будет ещё более гибкая структура с box-sizing */

html {
    box-sizing: border-box;
    font-size: 18px;
}

body,p,h1,h2,h3,ul,ol {
    margin: 0;
    padding: 0;
} /* Здесь мы сбросили все внешние и внутренние отступы у тегов текста потому, что по умолчнанию они есть */

.header {
    background-color: var(--bg); /* задний фон у общего div'а который имеет ширину окна и высоту ограниченную элементами которые в нем находятся */
}

.conteiner /* это - внутреннее белое поле в котром уже будут находиться наши блоки */
{
    background-color: #eee; /* звет белый, так как оно вложенно в header, то это фон накладывается поверх установленного header'ом как бы закрашивая его собой поверх */
    max-width: 1200px; /* оно может сжиматься и разжиматься, но максимальное значение 1200px. Если эту запись убрать, то оно собой полностью закрашивает зелёный header и как бы полностью становится вместо него */
    
    margin: 0 auto; 
    /* Когда указываем такую запись это означает что мы центрируем блок по центру. Если эту запись убрать, то блок прилипнет к левой строное веб-страницы */
    /* 0 - сверху и снизу, auto слева и справа по бокам от краёв экрана одинаково равномерное чтобы содержимое было в центре (auto указывает, что размер отступов будет автоматически рассчитан браузером). 
    Как только больше 1200 пикс, то появляется цвет teal от блока header, как только меньше то он собой полностью перекрывает header */

    padding: 0 15px; /* p:0-15. мы отодвинули внутренний контент от границ белого прямоугольника внутрь по 15 пикс слева и справа каждый  */
}

.row {
    display: flex; /* Расположили вложенные блоки в ряд вместо "друг под другом" */

    flex-wrap: wrap; /* элементы будут переходить на новые строки если будут не влезать */
}

.row > div { /* Последовательность селекторов отражает непосредственную вложенность - селектор справа от оператора должен быть прямым потомком селектора из левой части. Эта запись означает, что для всех дочерних div'ов независимо от того какой они класс имеют и сколько их, будут применятья стили к ним. Если  вместо ">" написать "пробел" как было раньше, то то же работает потому что когда пробел там любая вложенность, а не непосредсвенная вложенность */

padding: 15px; /* внутренноее цветное поле 15px во все 4 стотоны от букв для каждого блока, если это убрать то огибающий прямоугольник будет ровно вокруг букв */

margin: 0 auto; /* m0-au - это чтобы выровнять всё по центру. Если это не написать, то всё прилипнет друг к другу и к левому краю и все отступы будут добавляться в конце */

background-color: wheat;

border: 1px solid gray;
}

.col-3 /* класс, описыващий размер блока соответствующий трём колонкам */
{
    width: calc(25% - 15px); 
    /* Этим выражением мы увеличиваем нашу ширину  */
    /* 15px это отсупы */
    /* calc() - это функция матиматического рассчета, причем если умножаеи или делим то можно писать слитно, а если вычитаем или суммируем, то знаки плюс и минус должны отбиваться пробелами с двух сторон. */
    /* 25% мы рассчитали так: 12 виртуальные колонки это 100%, 3 колонки это 3/12=0,25=25%*/
}

.col-4 {
    width: calc(33.33% - var(--gutter));
    /* 33.33% это мы взяли 4 колонки из 12. 4/12=0,33333 */
}

.col-6 {
    width: calc(50% - var(--gutter));
    /* здесь мы вместо числа записали переменную var() и в качестве самой переменной --gutter написанной в самом верху в псевдоклассе :root */
}

.col-12 {
    width: calc(100% - var(--gutter)); 
    /* За 100% считается если окно на мониторе на полную, то 1200px-padding(15x2)=1200-30=1170px, а если уменьшение, то 100%= (динамическая ширина conteiner) - padding, и всё в пикселях */
    /* если забыть поставить пробел до или после минуса, то калькулятор не считает */
}

/* Ниже пишем медиазапросы, которые долны быть написаны после стилей, то есть их надо писать в конце всегда */

/* Правило @media позволяет указать тип носителя, для которого будет применяться указанный стиль. В качестве типов выступают различные устройства, например, screen - это "Экран монитора". */

@media screen and (max-width:992px) /* Это означает, что то что здесь будет написано будет работать только на экранах имеющих размер меньше 992px. Это число взять отсюда для уровня сетки "Большой - Large (lg)"
 https://getbootstrap.su/docs/5.3/layout/grid/ */
 /* Если коротко, то это называется перестроить сетку */
{
    .conteiner {
        max-width: 100%; /* Делаем так чтобы перестало работать ограничение в 1200пикс */
    }
    .col-Lg-3 {
            width: calc(25% - 15px); 
    }

    .col-Lg-4 {
        width: calc(33.33% - var(--gutter));
    }      

    .col-Lg-6 {
        width: calc(50% - var(--gutter));
    }
    /* Смотреть html код. Как только разрешение станет меньше 992, то применится к некоторым блоками занимающих 3 и 4 колонки применится свойство чтобы они стали занимать 6 колонок */

    .col-Lg-12 {
        width: calc(100% - var(--gutter));     
    }
    
    body {
        background-color: blue;
    } /* Это специально написано чтобы увидеть в F12 когда сработает @media. А то как будто ничего не меняется получилось. И он срабатывать начинает как только ширина становится меньше либо равно 992px.
    Если разрешение больше 992 пикс, то фон становится белым потому что он такой по умолчанию и мы его не переопределяли. */
}

@media screen and (max-width:768px) /* Для экранов меньше 768px. Уровень сетки "Средний - Medium (md)" */
{
    /* Для контейнера можно уже не устанавливать максимальную ширину потому что она применится сверху - с кода про 992px */

    body {
        background-color: red;
    } 

    .col-md-3 {
        width: calc(25% - 15px); 
    }
    .col-md-4 {
        width: calc(33.33% - var(--gutter));
    } 
    .col-md-6 {
        width: calc(50% - var(--gutter));
    }
    
    .col-md-12 {
        width: calc(100% - var(--gutter));     
    }
}

@media screen and (max-width:576px) /* Для экранов меньше 576px. Уровень сетки "Маленький - Small (sm)" */
{
    body {
        background-color: green;
    } 
    .col-sm-3 {
        width: calc(25% - 15px); 
    }
    .col-sm-4 {
        width: calc(33.33% - var(--gutter));
    } 
    .col-sm-6 {
        width: calc(50% - var(--gutter));
    }
    
    .col-sm-12 {
        width: calc(100% - var(--gutter));     
    }
}

