/*
    Если зайти на Яндекс Картинки -> Исследовать элемент -> Приложение ->
    -> Локальное хранилище (Local Storage)
    -> Хранение сеансов (Session Storage)

    Локальное хранилище (более мощное чем сессионное) позволяет нам сохранять какие-то данные, которые у нас будут возникать в процессе работы, и они будут оставаться даже если бы закроем страницу браузера или сам браузер, и заново его откроем или перезагрузим компьютер.
    Это очень полезный инструмент так как JS не имеет доступа к файловой системе компьютера: мы не можем например создать текстовый файл как на других языках и записать в него какую-то информацию и сохранить в любом месте на жестком диске, а в дальнейшем открыть файл к чтению и получить ту информацию которую мы сохранили

    Хранение сеансов хранит данные пока мы не закроем браузер, то есть мы можем много раз обновлять страницу например, и пока мы находимся на это вкладке не закрыв страницу, то у нас все данные будут в нём сохраняться.

    Работа с ними абсолютно одинаковая, только отличаются названия. Локальное хранилище более мощное и рассматривать будем его, а если понадобится Сессионное хранилище, то к нему применятся абсолютно все те же знания что и применяемые в local Storage.

    Справа у сайта https://yandex.ru мы видим множество данных в 2 столбика Ключ - Значение. Тут хранятся данные как в объекте в JavaScript. Ключи строковые, значения - какие-то данные (числа, строки, массивы, объекты, массив из объектов и так далее).

    */

    // Запись в localStorage:
    localStorage.setItem('key1', 546)
    localStorage.setItem('key2', "Обычная строка")
    localStorage.setItem('key3', false)
    // Метод SetItem используется чтобы установить какое-то значение в локальное хранилище
    // Сохраняем, Исследование элемента, Приложение, Локальное хранилище:
    // key1:546
    // key2:Обычная строка
    // key3:false
    // Структура хранилища это объект с отсутствием сортировки, поэтому данные могут быть в каком попало порядке. Тот порядок, в котором мы добавляли данные, не сохраняется. Оно может совпасть, но это случайно.
    // Теперь эти данне сохранятся даже после перезагрузки страницы.
    // Самый простой пример - это темная тема сайта с переключателем. Мы переключаем его чтобы включить темную тему, и когда мы закрываем браузер и открываем заново, то у нас включается уже темная тема как мы применили её в последний раз перед выходом.
    // Если закомментировать верхние 3 строки кода с setItem, что даст нам в дальнейшем отсутствие записи в Хранилище при старте страницы, то выключив и включив заново страницу через локальный сервер, мы увидим, что переменные остались сохраненными в странице. Если вернуть эти строки, то система увидит что они там есть и повторно их добавлять не будет.

    // Чтение из localStorage:
    console.log(localStorage.getItem('key2')); // Получили в консоли: Обычная строка
    console.log(localStorage.getItem('key4')); // Получили в консоли: null. При попытке получить из хранилища значения которых нет, получаем null. Таким способом можно проверять есть ли необходимый ключ.

    // Числовые индексы позволяют нам получать ключи, если мы их конкретно знаем, это тоже может быть иногда полезно
    console.log(localStorage.key(0)); // Получили в консоли: key2. Это говорит о том, что под нулевым индексом у нас находится key2, хотя видно в отладке это по другому порядку.
    console.log(localStorage.key(1)); // key3
    console.log(localStorage.key(2)); // key1

    // Длина локального хранилища (сколько там находится ключей)
    console.log(localStorage.length); // Получили 3. length писать без скобок, иначе будет ошибка с пояснением, что length это не функция

    // Удаление элементов под определенным ключом
    // localStorage.removeItem('key3') // В приложении / Локальное хранилище исчезла запись key3

    // Полная очистка локального хранилища
    // localStorage.clear() // В приложении / Локальное хранилище исчезли все записи

    console.log(`\n`);

    // Проход циклом for по ключам локального хранилища 3 способа:

    // 1) for
    for (let i = 0; i < localStorage.length; i++) {
        let key = localStorage.key(i) // key1, key2, key3
        console.log(`${key}: ${localStorage.getItem(key)}`);
    }
    // Получили:
    // key2: Обычная строка
    // key3: false
    // key1: 546
    // Ключи выводятся в том порядке, в каком у них идут индексы. Важно учитывать, что они не совпадают с тем порядком, в котором мы их добавляли в хранилище, это несортированные данные

    console.log(`\n`);

    // 2) Проход циклом for in (цикл для массивов) по ключам локального хранилища:
    for(let key in localStorage) {
        console.log(key);
    }
    // Получили:
    // key2
    // key3
    // key1
    // clear
    // getItem
    // key
    // removeItem
    // setItem
    // length

    // Из-за того, что мы получили кроме ключей ещё и ненужные нам ключевые слова методов, то цикл for in в случае с локальным хранилищем нам очень плохо подходит. Для его нормальной работы нужно отфильтровать поля из прототипа с помощью проверки hasownproperty

    console.log(`\n`);

    for(let key in localStorage) {
        if(!localStorage.hasOwnProperty(key)) { // Если текущий ключ не является собственным свойством, то есть является встроенным методом length, getItem и т.д., который нам не нужен
        continue} // то пропустить итерацию цикла. Пропустит такие ключи, как "setItem", "getItem" и так далее
        console.log(key);
    }
    // key2
    // key3
    // key1
    // В результате получили то, что нужно без лишних ключевых слов

    console.log(`\n`);

    // 3)  of (для объекта):
    for(let key of Object.keys(localStorage)) { // Проходимся с помощью метода Object.keys() по ключам. В этом случае мы не получим лишние ключевые слова, а получим только интересующие нас ключи
        console.log(key);
    }
    // key2
    // key3
    // key1
    // В результате получили то, что нужно без лишних ключевых слов

    // В localStorage можно хранить что-то вроде 5 мегабайт информации, это зависит от разных браузеров. Этого более чем достаточно чтобы хранить какую-то временную информацию и делать свои страницы и приложения более интерактивными:
    // - сохранять данные в каких-то текстовых полях
    // - оставлять checkbox и кнопки выбранными даже после закрытия страницы или перезагрузки браузера

    // Вопрос: Какие методы пригождаются при работе с локальным хранилищем?
    // Выберите все подходящие ответы из списка
    // Ответ: setItem, getItem, key

    // https://learn.javascript.ru/localstorage



























