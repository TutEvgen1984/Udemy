// * Создадим карточки для каждого человека из константы people и поместим их на страницу html
    for (let i = 0; i < people.length; i++) {
        let item = document.createElement('div') // для каждой карточки свой дополнительный div
        item.classList.add('item') // это заранее созданный класс для оформления карточки
        item.innerHTML = `
        ФИО: ${people[i]["name"]['f']} ${people[i]["name"]['i']} ${people[i]["name"]['o']} <br>
        Номера телефона: ${people[i]['number'].join(', ')} <br>
        День рождения: ${people[i]['date']['d']} ${month[+people[i]['date']['m']]} ${people[i]['date']['y']} <br>
        Комната: ${people[i]["room"]} <br>
    `
        // С помощью метода join объединяем 2 номера через запятую (объединяем 2 элемента массива), если его не поставить, то номера сами сольются вместе через запятую и пробела не будет между ним, это работает только для массивов (для объектов не работает)

        // День рождения месяц указываем не в виде числа, а в виде Текста, который хранится в константе month под соответствующим индексом, month[1] это будет 'Января', а номер месяца из соответствующего числа записанного в константе people в виде числа используется как индекс для константы month. "+"" перед people стоит специально, чтобы в случае если там не число а строка, то преобразовать её в число

        document.querySelector('.items').append(item)
    }

// * Создадим из нашей программы функцию:
// querySelector('.items') меняем на querySelector(selector)
// С помощью Найти (CTRL+F) заменяем константу people на array
function createCords(selector, array) {
    for (let i = 0; i < array.length; i++) {
        let item = document.createElement('div')
        item.classList.add('item')
        item.innerHTML = `
        ФИО: ${array[i]["name"]['f']} ${array[i]["name"]['i']} ${array[i][`name`]['o']} <br>
        Номера телефона: ${array[i]['number'].join(', ')} <br>
        День рождения: ${array[i]['date']['d']} ${month[+array[i]['date']['m']]} ${array[i]['date']['y']} <br>
        Комната: ${array[i]["room"]} <br>
    `
        document.querySelector(selector).append(item)
    }
}
// createCords('.items', people)
// удобство функции в том, что теперь мы можем указывать с каким аналогичным содержимым работать (любой другой подобный массив), и можем указывать любое место на html-странице, куда вставлять результат

// * Напишите код, чтобы извлечь число 2485841 из объекта PHONE_NUMBER
// Объект PHONE_NUMBER находится в файле const.js, который вы скачали в начале этого модуля. Он выглядит так:
/*// Номера телефонов
const PHONE_NUMBER = {
    'Группа номеров 1': [
      ['Номер 1', '2591514'],
      ['Номер 2', '2182742'],
      ['Номер 3', '2791821']
    ],
    'Группа номеров 2': [
      ['Номер 1', '2485841']
    ],
    'Группа номеров 3': [
      ['Номер 1', '212433, 243574'],
      ['Номер 2', '442431, 552432']
    ]
  }*/

// Заполните пропуски
// Решение:
// let num = PHONE_NUMBER["Группа номеров 2"][0][1]
/*Верно решили 277 учащихся
Из всех попыток 20% верных

Igor Abramov: вся сложность в том, что у второго ключа одно значение, и многие после обращения к ключу напрямую вызывают первый элемент объекта( то есть второй, если по человеческому языку хах) , то есть нужный нам номер. но если не спешить то можно увидеть, что пусть значение у ключа и одно, но оно является массивом, поэтому чтобы к нему обратиться, надо у ключа этот объект и вытащить. так как он один, индекс у него нулевой*/
