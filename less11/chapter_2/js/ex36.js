// Пример 36 - Загрузка документа и ресурсов

// Существует 3 важных события у жизненного цикла.

// * 1) DOMContentLoaded
// Событие означает, что DOM готов, так что обработчик может искать узлы и инициализировать интерфейс
// Браузер полностью загрузил HTML, было построено DOM-дерево, но внешние ресурсы, такие как картинки и стили могут быть ещё не загружены, и срабатывание этого события не гарантирует того, что у нас все загружено в качестве ресурсов (картинки, звуки, видео...). Но DOM-дерево построено и мы можем искать какие-то элементы на странице, добавлять к ним обработчики событий и т.д. 

// Событие DOMContentLoaded происходит, когда браузер разобрал HTML-страницу и составил DOM-дерево. Если нужно, чтобы страница обязательно загрузилась полностью, лучше присмотреться к load.
// Чтобы показать пользователю страницу, браузер делает следующие первые шаги:

// 1) Запрашивает HTML-страницу с сервера.
// 2) Обрабатывает полученный HTML и создаёт DOM для взаимодействия между JavaScript и HTML (☝️ в конце этого этапа происходит событие DOMContentLoaded).
// Событие DOMContentLoaded происходит раньше события load и гарантирует, что DOM готов. Можно искать по нему узлы и не бояться, что что-то не догрузилось (кроме стилей, картинок и так далее).
// Статья: https://doka.guide/js/event-domcontentloaded/

// событие вешается на document:
document.addEventListener('DOMContentLoaded', function (e) {
    console.log('DOM построен');
})
// DOM построен в консоли появилось моментально потому что на странице ничего нет.
// когда загрузка до 1 секунды, то мы этого не ощущаем, но когда это длится до 3 секунд при большой странице, то это становится сильно заметно и эта надпись в консоли появится не сразу

// * 2) Событие Load
// это событие означает, что внешние ресурсы были загружены, стили применены, и размеры картинок уже известны. при этом событии мы уверены что все ресурсы загружены
// оно применяется не к document, а к window (к окну)

window.onload = function (e) {
    console.log('Страница и внешние ресурсы были загружены');
}
// если странница большая то событие window.onload сработает позже чем DOMContentLoaded  потому что это зависит от того сколько это весит и какая скорость подключения к интернету

// * 3) Событие unload
// Это событие срабатывает когда пользователь почти ушёл, но мы все ещё можем запустить какие-то операции. оно часто используется для того чтобы отправить какую-то статистику. То есть когда пользователь уходит со страницы и нажимает закрыть ее́, срабатывает это событие, и в этот момент мы можем отправить какие-то данные на сервер, или сохранить что-то в локальном хранилище или сделать то что нам ещё потребуется.
window.addEventListener('unload', function () {
    // здесь выполняем какой то код:  отправляем на сервер что-то или сохраняем в локальное хранилище
})
// здесь нельзя выполнить preventDefault() и запретить пользователю уйти

// 4) Событие beforeunload
// если в этом событии в функции обработчика мы отменим стандартное проведение, то получим следующее:
window.onbeforeunload = function (e) {
    return false; // отменили стандартное проведение браузера
}
// При обновлении страницы получили стандартное всплывающее окно "Обновить страницу?" и запрос да или нет
// такое окно всегда возникает когда мы хотим предотвратить действия, которое сработало при событии beforeunload
// если нажать отмена, то мы здесь остаёмся
// если нажать "Да обновить",  то страница полностью обновляется и все данные которые мы заполняли в форме и почему-то, могут быть сброшены



