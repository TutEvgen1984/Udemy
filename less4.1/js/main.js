console.log("Раздел 4.1. Введение в JavaScript. Работа с консолью разработчика, создание переменных")

console.log('5+7') /* можно ставить одинарные и двойные кавычки */

console.log(5+7) /* в консоли вывелось "12" */

// console.log('10+7') закомментировали строку и в результате мы ничего в консоли не видим

/* Комментарий
на 3 
строки */

console.log('---')

let name = 5 /* Создаём переменную. Переменная не долждна начинаться с цифр  */
var str = "10" /* если встретили в коде переменную var, то это - устаревший идентификатор, который заменили на let в 2015 году */
// тип переменных - число или текст, ява-скрипт их автоматически распознает

// переменная типа булева логика, логические переменные:
let boolean = true
let boolean2 = false
// 3 типа переменных: 
// 1. числовые,
// 2. строковае (текстовые)
// 3. логические
// Это - 3 основыных типа переменных, с помощью которых делаетсая практически всё

let name2=9.5/5.5 /* поддерживается деление, результат будет дробным с точкой. Кроме того - числа надо писать с точкой, а не с запятой */
console.log(name2) /* Вывелось в коннсоль 1.7272727272727273 */

let a=5
console.log(a)
a++ /* прибавление к переменной "a" единицы */
console.log(a) /* в консоли появилось: 6 */
// если написать ++ после переменной и в консоли нажать интер, то мы увидим значение переменной без операции прибавления. Но если именно вывести значение переменной то увидим с прибавлением 

++a /* такая запись даёт в консоли с помощью интер сразу результат с прибавлением единицы к переменной */
console.log(a) /* в консоли: 7 */

let b=30
b+=2 /* запись эквивалентна b=b+2 . Здесь переменная, операция, равно, и значение на которое будем выполнять операцию. Применяется тогда, когда нужно одну и ту же переменную изменить на какое-то значение */
console.log(b) /* в консоли: 32 */

// "str1"+"str2" в консоли дают результат str1str2 , то есть два текста скрепленные друг с другом

let c1="str1" 
let c2="str2"
let c3=c1+c2
console.log(c3) /* в консоль вывелось склеивание строк str1str2 */

let c="str1" 
c+="str2"
console.log(c) /* в консоль вывелось склеивание строк str1str2, результат такой же что и выше, только компактнее*/

let d=5+'str3' /* число 5 преобразуется в текст и склеится со строкой */
console.log(d) /* в консоли результат = 5str3 */

let d2=d+28
console.log(d2) /* в консоли результат = 5str328 (произошла операция склейки текста, а не математическая операция). Если на какой-то стадии число пребразовалось в текст, то оно дальше идет как текст */

let e=5+'2'
console.log(e) /* в консоли видим результат 52. Это текст потому что одно из слагаемых было текстом) */
// Это называется конкатенация

// Нам нужно «склеить» несколько значений. Операция, которая позволяет присоединить одно значение к другому, называется конкатенацией и в JavaScript выполняется с помощью знака плюс. Склеивать можно обычные строки, а можно — строки и переменные (или свойства элементов).

console.log('---')
console.log('Раздел 4.2. Строковый и логический тип данных')

let str4 = "Привет" /* переменная создана и находится в памяти браузера. Если этот код написать в консоли и выполнить интером, то консоль напишет undefined. Так и должно быть. Потом если в консоли набрать str4 и нажать интер, то увидем результат 'Привет' */

console.log("длина переменной str4.length:")
console.log(str4.length) /* В консоли вывелось: 6 */

console.log('Длинная строка'.length)  /* Это мы вычислили сразу длину строки. В консоль вывелось 14 - это кол. символов включая пробел */

console.log('Первый символ str4[0]:')
console.log(str4[0]) /* в консоли видим "П". В квадратных скобках ноль - это нулевой индекс */

console.log('Нумерация символов начинается с нуля')

console.log('6-й символ str4[5]:')
console.log(str4[5])

console.log('Если мы хотим получить последний символ, но не знаем сколько символов всего, то пишем так: str4[str4.length-1]:')
console.log(str4[str4.length-1])

console.log(' ')

// Метод slice() (JavaScript Array):
// Метод slice() - позволяет возвратить новый массив, который содержит копии элементов, вырезанных из исходного массива. https://www.basicweb.ru/javascript/js_array_slice.php

console.log("str4.slice(1):")
console.log(str4.slice(1)) /* в консоли видим "ривет". Слайс с индексом 1 выдаёт все, начиная с индекса 1 и до самомого конца */

console.log("str4.slice(1,3):")
console.log(str4.slice(1,3)) /* В консоли получаем "ри" - это символы с индексом 1,2 - с первого ДО 3-го, причем 3-ий индекс не включается в выборку */

console.log(' ')

// Метод toLowerCase. https://code.mu/ru/javascript/manual/string/toLowerCase/
// Метод toLowerCase преобразует символы строки в нижний регистр (из больших букв делает маленькие). При этом мы получаем новую строку, а исходная строка остается неизменной.

console.log("str5='ЗАГЛАВНЫЕ_БУКВЫ'")
let str5='ЗАГЛАВНЫЕ_БУКВЫ'

console.log("str5.toLowerCase():")
console.log(str5.toLowerCase()) /* Получили в консоли "заглавные_буквы". Если в конце метода ненаписать пустые скобки (), то он не выполняется */

console.log(' ')

// Метод toUpperCase https://code.mu/ru/javascript/manual/string/toUpperCase/
// Метод toUpperCase производит преобразование строки в верхний регистр (из маленьких букв делает большие). При этом возвращается новая строка, а исходная строка не меняется.

console.log("str6='строчные_буквы'")
let str6='строчные_буквы'

console.log("str6.toUpperCase():")
console.log(str6.toUpperCase()) 

console.log(' ')

// Получив неправильную строку от пользователя с неправильным количеством пробелов и неправильные заглавные буквы, нам нужно её исправить с помощью изцченных методов:

console.log("let str7='  непРаВилЬная  СТРока  '")
let str7='  непРаВилЬная        СТРока  '

console.log("str7.toLowerCase() (примечание, при этом str7 остаётся неизменной)")
console.log(str7.toLowerCase())

// Метод trim
// Метод trim удаляет пробелы по краям строки. Чаще всего это нужно при вводе пользователем каких-либо значений: он может случайно налепить лишних пробелов - и наша задача очистить введенный текст от них.

console.log("let str8=str7.toLowerCase().trim()")
let str8=str7.toLowerCase().trim()
console.log(str8) 
// в консоли получили "неправильная        строка" с кучей пробелов в середине (лишние пробелы убираются методом trim() только по краям)

console.log('let str9=str8[0].toUpperCase()+str8[1,str8.length-1]')
let str9=str8[0].toUpperCase()+str8.slice(1)
console.log(str9)

console.log(' ')

// Удалим лишние пробелы в середине строки
// https://qna.habr.com/q/597048

let str10=str9.replace(/ +/g, ' ').trim()
console.log("let str10=str9.replace(/ +/g, ' ').trim()")
console.log(str10)
// Результат в консоли: "Неправильная строка"

// https://code.mu/ru/javascript/manual/string/replace/
// Метод replace осуществляет поиск и замену частей строки. Первым параметром принимается подстрока, которую заменяем, а вторым - подстрока, на которую заменяем.
// https://www.techiedelight.com/ru/remove-whitespaces-string-javascript/

console.log("\n     Логические типы данных и операции") /* \n - это перенос на новую строку в Java Script */

console.log("\nЛогическое И, символы &&")

let str11=true && true
console.log("\nlet str11=true && true") /* && - это логическое И */
console.log(str11) /* результат: true */

let str12=true && false
console.log("\nlet str12=true && false")
console.log(str12) /* результат: false */

let str13=false && false
console.log("\nlet str13=false && false")
console.log(str13) /* результат: false */

console.log("\nЛогическое ИЛИ, символы ||")

let str14=true || false
console.log("\nlet str14=true || false")
console.log(str14)

let str15=false || false
console.log("\nlet str15=false || false")
console.log(str15)

let str16=!true /* посклицательный знак означает отрицание НЕ */
console.log("\nlet str16=!true")
console.log(str16)

let str17=7>5
console.log("\nlet str17=7>5")
console.log(str17)

let str18=7>7
console.log("\nlet str18=7>7")
console.log(str18)

let str19=7>=7
console.log("\nlet str19=7>=7")
console.log(str19)

let str20=7==7 /* Сравнение чисел. Если набрать одно равно, то выдаст ошибку синтаксиса */
console.log("\nlet str20=7==7")
console.log(str20)

let str21=7=='7' /* сравнили число с числом, которое в виде типа данных "строка" */
console.log("let str21=7=='7'")
console.log(str21) /* получили true, Java Script произвёл приведение данных */

let str22=7==='7' /* с помощью тройного равно сравнили число с числом, которое в виде типаданных "строка" */
console.log("let str21=7==='7'")
console.log(str22) /* получили false потому что тройное равно сравнивает не только числа, но и типы данных */

// Разница в том, что тройное равенство является оператором строгого равенства (strict - строгий). Потому что при этом не выполняется приведение типов. Оператор строго равенства возвращает true только, когда оба значения идентичны/точно такие же.

let str23=7!='7' /* != - не равно */
console.log("\nlet str23=7!='7'")
console.log(str23) /* результат: false потому что 7 равно 7*/

let str24=7!=='7' /* !== - СТРОГО не равно */
console.log("\nlet str24=7!=='7'")
console.log(str24) /* результат: true потому что 7 равно 7, но типы данных слева число справа строка */

let str25=5!='7' /* != - не равно */
console.log("\nlet str25=5!='7'")
console.log(str25) /* результат: true */

// Типы undefined и null - это 2 дополнительных типа данных
// undefined означает что переменная не определена
// null - пустая переменная

let g 
console.log("let g")
console.log(g) /* в консоли получили undefined потому что не задали переменную, но проинициализировали её и поэтому ошибки нету в консоли. если попробовать вообще неизвестную переменную f, то появистя надпись ReferenceError */

let h=null /* сделали переменную как бы пустой */
console.log("\nlet h=null")
console.log(h) /* в консоли результат null */

