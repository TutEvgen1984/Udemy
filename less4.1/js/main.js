console.log("Раздел 4.1. Введение в JavaScript. Работа с консолью разработчика, создание переменных")

console.log('5+7') /* можно ставить одинарные и двойные кавычки */

console.log(5+7) /* в консоли вывелось "12" */

// console.log('10+7') закомментировали строку и в результате мы ничего в консоли не видим

/* Комментарий
на 3 
строки */

console.log('---')

let name = 5 /* Создаём переменную. Переменная не долждна начинаться с цифр  */
var str = "10" /* если встретили в коде переменную var, то это - устаревший идентификатор, который заменили на let в 2015 году */
// тип переменных - число или текст, ява-скрипт их автоматически распознает

// переменная типа булева логика, логические переменные:
let boolean = true
let boolean2 = false
// 3 типа переменных: 
// 1. числовые,
// 2. строковае (текстовые)
// 3. логические
// Это - 3 основыных типа переменных, с помощью которых делаетсая практически всё

let name2=9.5/5.5 /* поддерживается деление, результат будет дробным с точкой. Кроме того - числа надо писать с точкой, а не с запятой */
console.log(name2) /* Вывелось в коннсоль 1.7272727272727273 */

let a=5
console.log(a)
a++ /* прибавление к переменной "a" единицы */
console.log(a) /* в консоли появилось: 6 */
// если написать ++ после переменной и в консоли нажать интер, то мы увидим значение переменной без операции прибавления. Но если именно вывести значение переменной то увидим с прибавлением 

++a /* такая запись даёт в консоли с помощью интер сразу результат с прибавлением единицы к переменной */
console.log(a) /* в консоли: 7 */

let b=30
b+=2 /* запись эквивалентна b=b+2 . Здесь переменная, операция, равно, и значение на которое будем выполнять операцию. Применяется тогда, когда нужно одну и ту же переменную изменить на какое-то значение */
console.log(b) /* в консоли: 32 */

// "str1"+"str2" в консоли дают результат str1str2 , то есть два текста скрепленные друг с другом

let c1="str1" 
let c2="str2"
let c3=c1+c2
console.log(c3) /* в консоль вывелось склеивание строк str1str2 */

let c="str1" 
c+="str2"
console.log(c) /* в консоль вывелось склеивание строк str1str2, результат такой же что и выше, только компактнее*/

let d=5+'str3' /* число 5 преобразуется в текст и склеится со строкой */
console.log(d) /* в консоли результат = 5str3 */

let d2=d+28
console.log(d2) /* в консоли результат = 5str328 (произошла операция склейки текста, а не математическая операция). Если на какой-то стадии число пребразовалось в текст, то оно дальше идет как текст */

let e=5+'2'
console.log(e) /* в консоли видим результат 52. Это текст потому что одно из слагаемых было текстом) */
// Это называется конкатенация

// Нам нужно «склеить» несколько значений. Операция, которая позволяет присоединить одно значение к другому, называется конкатенацией и в JavaScript выполняется с помощью знака плюс. Склеивать можно обычные строки, а можно — строки и переменные (или свойства элементов).

console.log('---')
console.log('Раздел 4.2. Строковый и логический тип данных')

let str4 = "Привет" /* переменная создана и находится в памяти браузера. Если этот код написать в консоли и выполнить интером, то консоль напишет undefined. Так и должно быть. Потом если в консоли набрать str4 и нажать интер, то увидем результат 'Привет' */

console.log("длина переменной str4.length:")
console.log(str4.length) /* В консоли вывелось: 6 */

console.log('Длинная строка'.length)  /* Это мы вычислили сразу длину строки. В консоль вывелось 14 - это кол. символов включая пробел */

console.log('Первый символ str4[0]:')
console.log(str4[0]) /* в консоли видим "П". В квадратных скобках ноль - это нулевой индекс */

console.log('Нумерация символов начинается с нуля')

console.log('6-й символ str4[5]:')
console.log(str4[5])

console.log('Если мы хотим получить последний символ, но не знаем сколько символов всего, то пишем так: str4[str4.length-1]:')
console.log(str4[str4.length-1])

// console.log(str4[3,4]) выдаёт в консоль только "е" почему-то, это аналогично str4[4]:

console.log(str4[3,4]) /* в консоли "е" */
console.log(str4[4]) /* в консоли "е" */

console.log(' ')

// Метод slice() (JavaScript Array):
// Метод slice() - позволяет возвратить новый массив, который содержит копии элементов, вырезанных из исходного массива. https://www.basicweb.ru/javascript/js_array_slice.php

console.log("str4.slice(1):")
console.log(str4.slice(1)) /* в консоли видим "ривет". Слайс с индексом 1 выдаёт все, начиная с индекса 1 и до самомого конца */

console.log("str4.slice(1,3):")
console.log(str4.slice(1,3)) /* В консоли получаем "ри" - это символы с индексом 1,2 - с первого ДО 3-го, причем 3-ий индекс не включается в выборку */

console.log(' ')

// Метод toLowerCase. https://code.mu/ru/javascript/manual/string/toLowerCase/
// Метод toLowerCase преобразует символы строки в нижний регистр (из больших букв делает маленькие). При этом мы получаем новую строку, а исходная строка остается неизменной.

console.log("str5='ЗАГЛАВНЫЕ_БУКВЫ'")
let str5='ЗАГЛАВНЫЕ_БУКВЫ'

console.log("str5.toLowerCase():")
console.log(str5.toLowerCase()) /* Получили в консоли "заглавные_буквы". Если в конце метода не написать пустые скобки (), то он не выполняется */

console.log(' ')

// Метод toUpperCase https://code.mu/ru/javascript/manual/string/toUpperCase/
// Метод toUpperCase производит преобразование строки в верхний регистр (из маленьких букв делает большие). При этом возвращается новая строка, а исходная строка не меняется.

console.log("str6='строчные_буквы'")
let str6='строчные_буквы'

console.log("str6.toUpperCase():")
console.log(str6.toUpperCase()) 

console.log(' ')

// Получив неправильную строку от пользователя с неправильным количеством пробелов и неправильные заглавные буквы, нам нужно её исправить с помощью изученных методов:

console.log("let str7='  непРаВилЬная  СТРока  '")
let str7='  непРаВилЬная        СТРока  '

console.log("str7.toLowerCase() (примечание, при этом str7 остаётся неизменной)")
console.log(str7.toLowerCase())

// Метод trim
// Метод trim удаляет пробелы по краям строки. Чаще всего это нужно при вводе пользователем каких-либо значений: он может случайно налепить лишних пробелов - и наша задача очистить введенный текст от них.

console.log("let str8=str7.toLowerCase().trim()")
let str8=str7.toLowerCase().trim()
console.log(str8) 
// в консоли получили "неправильная        строка" с кучей пробелов в середине (лишние пробелы убираются методом trim() только по краям)

console.log('let str9=str8[0].toUpperCase()+str8.slice(1)')
let str9=str8[0].toUpperCase()+str8.slice(1)
console.log(str9) /* Получили "Неправильная        строка" */

console.log(' ')

// Удалим лишние пробелы в середине строки
// https://qna.habr.com/q/597048

let str10=str9.replace(/ +/g, ' ').trim()
console.log("let str10=str9.replace(/ +/g, ' ').trim()")
console.log(str10)
// Результат в консоли: "Неправильная строка" . Здесь используются регулярные выражения

// https://code.mu/ru/javascript/manual/string/replace/
// Метод replace осуществляет поиск и замену частей строки. Первым параметром принимается подстрока, которую заменяем, а вторым - подстрока, на которую заменяем.
// https://www.techiedelight.com/ru/remove-whitespaces-string-javascript/

console.log("\n     Логические типы данных и операции") /* \n - это перенос на новую строку в Java Script */

console.log("\nЛогическое И, символы &&")

// Символ &, или амперсанд, — это союз «и». Примерно в начале XIX века он был 27-й буквой английского алфавита. Рассказывая алфавит у доски, школьники говорили»…X, Y, Z, and and». Неудобно и непонятно. Тогда эту закорючку и начали называть and per se and — то есть «непосредственно and». Постепенно and per se and превратилось в ampersand (амперсанд) — современное название.

let str11=true && true
console.log("\nlet str11=true && true") /* && - это как бы блок логического И, работающий по принципу 2 из двух, на который с двух сторон приходит 2 сигнала и на выходе получаем труе или фалсе в переменной */
console.log(str11) /* результат: true */

let str12=true && false
console.log("\nlet str12=true && false")
console.log(str12) /* результат: false */

let str13=false && false
console.log("\nlet str13=false && false")
console.log(str13) /* результат: false */

console.log("\nЛогическое ИЛИ, символы ||")

// Вертика́льная черта́ — символ ASCII, имеющий код 0x7C (hex), 124 (dec). Этот символ пользователи UNIX называют «пайп», от англ. pipeline — конвейер. В первых, ещё советских, изданиях книг В. Э. Фигурнова название «pipe» было переведено как «символ трубопровода». В C-подобных языках символ "|" служит для операции побитового «или» (дизъюнкция), а два таких символа, написанных слитно ("||"), используются в операции логического «или».

let str14=true || false
console.log("\nlet str14=true || false")
console.log(str14) /* получили true */

let str15=false || false
console.log("\nlet str15=false || false")
console.log(str15) /* получили false */

// Восклица́тельный знак (!) exclamation mark (англ.) В языке Си и некоторых других языках программирования символом «!» обозначается операция логического отрицания, а сочетанием «!=» — операция сравнения «не равно». В некоторых языках используется также «!==» и другие составные знаки. В некоторых диалектах Бейсика восклицательный знак, поставленный сразу после имени переменной, означает, что эта переменная — с плавающей запятой и обычной точности.

let str16=!true /* посклицательный знак означает отрицание НЕ */
console.log("\nlet str16=!true")
console.log(str16) /* получили false */

let str17=7>5
console.log("\nlet str17=7>5")
console.log(str17) /* получили true */

let str18=7>7
console.log("\nlet str18=7>7")
console.log(str18) /* получили false */

let str19=7>=7
console.log("\nlet str19=7>=7")
console.log(str19) /* получили true */

let str20=7==7 /* Сравнение чисел. Если набрать одно равно, то выдаст ошибку синтаксиса */
console.log("\nlet str20=7==7")
console.log(str20) /* получили true */

let str21=7=='7' /* сравнили число с числом, которое в виде типа данных "строка" */
console.log("\nlet str21=7=='7'")
console.log(str21) /* получили true, Java Script произвёл приведение данных */

let str22=7==='7' /* с помощью тройного равно сравнили число с числом, которое в виде типа данных "строка" */
console.log("\nlet str22=7==='7'")
console.log(str22) /* получили false потому что тройное равно сравнивает не только числа, но и типы данных */

// Разница в том, что тройное равенство является оператором строгого равенства (strict - строгий). Потому что при этом не выполняется приведение типов. Оператор строго равенства возвращает true только, когда оба значения идентичны/точно такие же.

let str23=7!='7' /* != - не равно */
console.log("\nlet str23=7!='7'")
console.log(str23) /* результат: false потому что 7 равно 7 (сделано приведение типов) */

let str24=7!=='7' /* !== - СТРОГО не равно */
console.log("\nlet str24=7!=='7'")
console.log(str24) /* результат: true потому что 7 равно 7, но типы данных: слева - число, справа - строка */

let str25=5!='7' /* != - не равно */
console.log("\nlet str25=5!='7'")
console.log(str25) /* результат: true */

// Типы undefined и null - это 2 дополнительных типа данных
// undefined означает что переменная не определена
// null - пустая переменная

let g 
console.log("\nlet g")
console.log(g) /* в консоли получили undefined потому что не задали переменную, но проинициализировали её и поэтому ошибки нет в консоли. Если попробовать вывести в консоль вообще неизвестную переменную f, то появится надпись ReferenceError */

let h=null /* сделали переменную как бы пустой */
console.log("\nlet h=null")
console.log(h) /* в консоли результат null */

// null - Примитивный тип данных. Состоит из единственного значения null и обозначает отсутствие значения. Значение null используют, когда нужно обозначить намеренное отсутствие значения. В языке существует похожий примитив undefined, он обозначает, что значение ещё не установлено. Их можно легко спутать, потому что оба обозначают отсутствие значения. Разница состоит в том, что null обозначает намеренное отсутствие, а undefined — неявное. https://doka.guide/js/null-primitive/

console.log('\n---')
console.log('\nРаздел 4.3. Шаблонные строки, случайные числа, Округление чисел')

/* console.log('Текст на двух
строках') Получаем ошибку "Строковый литерал без признака конца". */
// При попытке в консоль вывести текст расположенный на 2-х строках с помощью кавычек "" и '', получаем ошибку в VSCode.

console.log(`\nТекст на 2-х
строках`) /* Специальные обратные кавычки позволяют делать текст на несколько строк, находятся на кнопке где тильда, слева над табом */

let v=47
console.log(`\n Обратные специальные кавычки и на 
второй строке переменная v= ${v}
и на 3-ей строке текст`)
// обратные кавычки - единственные кавычки в JavaScript, в которых можно использовать встраивание переменных с помощью символа доллара $

// Ниже сделаем запись на 2 строки с помощью обычных кавычек:
console.log("\n Обычные кавычки, затем ставим n \n и оказываемся на 2-ой строке \n и на 3-ей строке выводим переменную v=" + v + " при этом в коде всё пишется в одну строку, и надо ещё обязательно писать + иначе получаем Error")

let math1=Math.random() /* Math обязательно с большой буквой. с помощью random() мы сгененрируем случайное число от 0 до 1 не включая единицу, при этом нужно обязательно ставить скобки,  возвращаемое при помощи Math.random() может быть 0, но никогда не будет равно 1 */
console.log("\n" + math1) /* получили в консоли рандомное число */


// Математический максимум:
let math2=Math.max(-5,5,10,40.88,2) /* вычисление максимального числа из ряда чисел находящихся в скобках перечисленных через запятую */
console.log("\n" + math2) /* получили в консоли 40.88 */

// Возведение в степень (метод pow)
let math3=Math.pow(2,5) /* переводе число это то что хотим возводить в степень, второе число - степень, то есть (2,5) это 2 в степени 5 */
console.log("\n" + math3) /* получили в консоли 32 */

// Здесь можно извлечь корень с помощью pow, делаем степень равной 0.5 :
let math4=Math.pow(16,0.5)
console.log("\n корень из 16 методом pow = " + math4) /* получили в консоли 4 */

// Для корнеизвлечения есть специальная функция sqrt. Аббревиатура SQRT — square root (англ.) - переводится как квадратный корень:
let math5=Math.sqrt(64)
console.log("\n корень из 64 методом sqrt = " + math5) /* получили в консоли 8 */

// Округление дробного числа в меньшую сторону Math.floor:

let math6=Math.floor(3.9)
console.log("\n Округление дробного числа в меньшую сторону 3.9 с помощью Math.floor(3.9) = " + math6) /* получили 3 */

// Округление дробного числа в большую сторону Math.ceil:
let math7=Math.ceil(3.1)
console.log("\n Округление дробного числа в большую сторону 3.1 с помощью Math.ceil(3.1) = " + math7) /* получили 4 */

// Округление дробного числа по стандартным математическим правилам Math.round:
let math8=Math.round(3.5)
console.log("\n Округление дробного числа 3.5 с помощью Math.round(3.5) = " + math8) /* получили 4 */
let math9=Math.round(3.4)
console.log("\n Округление дробного числа 3.4 с помощью Math.round(3.4) = " + math9) /* получили 3 */

// Есть метод округления trunc который просто убирает дробную часть, какой бы она не была:
let math10=Math.trunc(7.444)
console.log("\n Округление дробного числа 7.444 с помощью Math.trunc(7.444) = " + math10)

// Округление до определенного количества знаков после запятой toFixed(x), где х - количество знаков после запятой:
let math11=9.56561648
let math12=math11.toFixed(3)
console.log("\n Округление дробного числа 9.56561648 с помощью math11.toFixed(3) до 3-х знаков после запятой = " + math12) /* получили 9.566, при этом .5656 округлилось по правилам математики до 0.566 */

// действие преобразующее строку в число:
let math13="42"
let math14=math13+2
console.log("\n math13='42'+2 = " + math14) /* получили 422 (произошла котагенация) */
let math15=+math13+2
console.log("\n добавим + перед строковой переменной. math15=+math13+2 = " + math15) /* получили 44 (контаценации не произошло). Это мы как бы самостоятельно конвертируем строки в числа */

// Встроенная функция для проверки является ли переменная числом isFinite:
math16="300"
console.log("\n Встроенная функция для проверки является ли переменная числом isFinite('300') = " + isFinite(math16)) /* получили true */

console.log("\n Встроенная функция для проверки является ли переменная числом isFinite('str78') = " + isFinite("str78")) /* получили false */

function randomInteger(min,max) /* эта функция вычисляет рандомное целое число в пределах минимума и максимума задаваемых пользователем. Обычно эти функции берутся где-нибудь из интернета */
{
    let rand = min + Math.random() * (max + 1 - min);
    return Math.floor(rand);
}

console.log("\n Используем собственно созданную функцию создания рандомного числа randomInteger(1,5) = " + randomInteger(1,5)) /* получаем случайное целое число, которое меняется при каждой перезагрузке страницы  */

/* 
Вопрос №1: Как перевести текст на новую строку?
Ответ №1: \n
*/